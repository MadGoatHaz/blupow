MQTT (Message Queuing Telemetry Transport) is a lightweight messaging protocol that is ideal for Internet of Things (IoT) devices due to its efficiency and low bandwidth requirements. Home Assistant leverages MQTT to integrate a vast array of devices, enabling robust home automation.
1. Understanding MQTT Basics for Home Assistant
At its core, MQTT operates on a publish/subscribe model. Instead of devices directly communicating with each other, they publish messages to an MQTT broker, and other devices or applications subscribe to specific "topics" to receive those messages.
MQTT Broker: This is the central hub that receives all messages from publishers and forwards them to subscribers. For Home Assistant, the most common and recommended broker is Mosquitto, which can be installed as an add-on directly within Home Assistant.[1][2][3][4]
Topics: Messages are organized into topics, which are hierarchical strings (e.g., home/bedroom/temperature). Devices publish data to specific topics, and Home Assistant subscribes to these topics to receive the data.
Payload: The actual data transmitted in an MQTT message. This can be a simple string, a number, or a more complex JSON object.[5][6][7]
Publisher: A device or application that sends messages to the MQTT broker on a specific topic.
Subscriber: A device or application that receives messages from the MQTT broker by subscribing to specific topics. Home Assistant acts as a subscriber to receive data from your MQTT devices.
Retain Flag: When a message is published with the "retain" flag, the broker stores the last message on that topic. Any new subscriber to that topic will immediately receive this retained message. This is crucial for sensors, as it ensures Home Assistant gets the latest state even if it restarts.[5]
Quality of Service (QoS): MQTT offers different QoS levels (0, 1, 2) to guarantee message delivery. QoS 0 (at most once) is the fastest but offers no delivery guarantees. QoS 1 (at least once) ensures delivery but might result in duplicates. QoS 2 (exactly once) guarantees delivery without duplicates but is the slowest.
2. Setting Up the MQTT Broker in Home Assistant
The easiest way to get started is by installing the Mosquitto Broker add-on in Home Assistant.
Install Mosquitto Broker:
Navigate to Settings > Add-ons in your Home Assistant UI.[1][3]
Click on Add-on Store in the lower right corner.[1]
Search for "Mosquitto broker" and click INSTALL.[1]
Once installed, enable "Start on boot" and "Watchdog" (optional but recommended for reliability).[1]
Click START to launch the broker.[1][3]
Create an MQTT User (Recommended):
Go to Settings > People.[1][8]
Click ADD PERSON in the lower right corner.[1]
Enter a name (e.g., mosquitto), enable "Allow person to login," set a strong password, and optionally restrict local network login.[1][8] This user will be used by Home Assistant to connect to the broker.
Configure MQTT Integration:
Go to Settings > Devices & Services.[1][2][3]
MQTT should appear as a "Discovered" integration. If not, click + Add Integration and search for "MQTT".[1][2][3][8]
Click CONFIGURE on the MQTT integration.[1][3]
If prompted to connect to the Mosquitto broker add-on, click SUBMIT and then FINISH. Home Assistant will automatically configure the connection using the add-on.[1][2][3]
If you're using an external MQTT broker, you'll need to provide its hostname (or IP address), port (default 1883), and the username/password you created.[2][4][9][10][11]
3. Configuring MQTT Devices and Entities
There are two primary ways to integrate MQTT devices into Home Assistant:
A. MQTT Discovery (Recommended for DIY Devices)
MQTT Discovery allows devices to automatically configure themselves in Home Assistant by publishing a special "discovery" message to a predefined topic. This eliminates the need for manual YAML configuration in Home Assistant.[2][7][12][13][14]
Discovery Topic Structure: The default discovery topic base is homeassistant/. The full topic typically follows this format:
homeassistant/<component>/<node_id>/<object_id>/config[7][12]
<component>: The type of Home Assistant entity (e.g., sensor, switch, light, binary_sensor).[12]
<node_id> (Optional): An ID for the node providing the topic.[12]
<object_id>: A unique ID for the device/entity.[7][12]
/config: Indicates this is a discovery configuration message.
Discovery Payload: The payload of the discovery message must be a JSON dictionary containing the configuration for the entity, similar to what you would put in configuration.yaml. It includes details like name, state_topic, unit_of_measurement, device_class, unique_id, and device information to group entities under a single device.[7][12]
An empty payload on a discovery topic will cause a previously discovered device to be deleted.[12]
Benefits:
Minimal Home Assistant Configuration: No manual YAML editing for each device.[7][12]
Automatic Updates: If a device's capabilities change, it can publish a new discovery message to update its configuration in Home Assistant.
Device Grouping: Multiple entities from a single physical device can be grouped under a single "device" in Home Assistant's UI.[7]
B. Manual YAML Configuration
For devices that don't support MQTT Discovery, or if you prefer explicit control, you can manually define MQTT entities in your configuration.yaml file.[3][5][6][15][16]
File Location: The main configuration file for Home Assistant is configuration.yaml. It's typically located in the root of your Home Assistant configuration directory (e.g., /config/configuration.yaml for Home Assistant OS/Container installations).[3][5][17]
You can access and edit this file using the File Editor add-on or Studio Code Server add-on in Home Assistant.[3][18]
For Mosquitto broker configuration files (e.g., for bridging), they are often placed in /share/mosquitto/ (e.g., mosquitto.conf or solar_assistant.conf).[18][19][20]
Example MQTT Sensor Configuration:
Generated yaml
# configuration.yaml
mqtt:
  sensor:
    - name: "Bedroom Temperature"
      state_topic: "home/bedroom/temperature"
      unit_of_measurement: "°C"
      device_class: temperature
      unique_id: bedroom_temp_sensor_001 # Required for UI editing and entity registry
      value_template: "{{ value }}" # Use if payload is just the value
    - name: "Living Room Humidity"
      state_topic: "home/livingroom/environment"
      unit_of_measurement: "%"
      device_class: humidity
      value_template: "{{ value_json.humidity }}" # Use if payload is JSON
      json_attributes_template: "{{ value_json | tojson }}" # To expose all JSON attributes
Use code with caution.
Yaml
state_topic (Required): The MQTT topic from which the sensor's state will be read.[5][21]
name (Optional): The name of the sensor displayed in Home Assistant.[5][21]
unit_of_measurement (Optional): The unit for the sensor's value (e.g., "°C", "%", "lux").[5][6][21]
device_class (Optional): Provides semantic information to Home Assistant, affecting how the sensor is displayed and handled (e.g., temperature, humidity, pressure).[5][6]
unique_id (Required for UI editing): An ID that uniquely identifies this sensor. Essential for changing entity_id after creation and storing changes in the Entity Registry.[2][5]
value_template (Optional): A Jinja2 template to extract the actual sensor value from the MQTT payload. Use {{ value }} if the payload is the raw value, or {{ value_json.<key> }} if the payload is a JSON object.[5][6][21]
json_attributes_template (Optional): Used to extract additional attributes from a JSON payload, which will be displayed in the frontend.[5]
availability_topic (Optional): An MQTT topic to receive availability (online/offline) updates for the device.[5][6][15] payload_available and payload_not_available define the payloads for these states.[5]
expire_after (Optional): Defines the number of seconds after which the sensor's value expires if it's not updated.[21]
4. Working with Different MQTT Entity Types
Home Assistant supports various MQTT entity types beyond just sensors:
MQTT Binary Sensor: For on/off states (e.g., door open/closed, motion detected).
MQTT Switch: To control devices with on/off commands. Requires state_topic and command_topic.[15]
MQTT Light: For controlling lights, including brightness, color, and color temperature.[15]
MQTT Cover, Fan, Lock, Climate, etc.: Many other domains are supported. Refer to the official Home Assistant MQTT documentation for specific configurations.[21]
5. Polling Devices with MQTT
MQTT is inherently a push-based protocol, meaning devices publish data when there's a change or at a set interval, rather than Home Assistant "polling" them.[22]
Device-Initiated Updates: For most sensors, the device itself is configured to publish its state to an MQTT topic at regular intervals (e.g., every 30 seconds, every 5 minutes) or when a significant change occurs. This is the most common and efficient way to get data into Home Assistant via MQTT.
Tasmota Firmware: Devices flashed with Tasmota firmware (common for ESP8266/ESP32-based devices) can be configured to report sensor data via MQTT. The TelePeriod command in Tasmota controls how often the device publishes its sensor states.[23][24]
Simulating Polling for Control: While MQTT doesn't "poll" in the traditional sense, Home Assistant can send commands to a device's command_topic. The device then performs an action (e.g., takes a reading, changes a state) and publishes its new state back to its state_topic. This creates a request-response pattern that mimics polling for control purposes.
Considerations for Battery-Powered Devices: For battery-powered sensors, frequent polling or publishing can significantly drain the battery. MQTT's push model is beneficial here, as devices can sleep and only wake up to publish data when necessary (e.g., a door sensor publishing only when opened/closed).[22]
6. Device Setup and Communication
The process for setting up an MQTT device to communicate with Home Assistant generally involves:
Device Firmware/Software: Ensure your device runs firmware that supports MQTT (e.g., Tasmota, ESPHome, custom Arduino/ESP code).
MQTT Broker Details: Configure the device with the IP address/hostname of your Home Assistant's MQTT broker, the port (1883 is standard), and the MQTT username/password you created.[9][10][11]
Topics: Define the MQTT topics the device will publish to (state topics) and subscribe to (command topics). Ensure these topics align with what Home Assistant expects (either via discovery or manual YAML configuration).
Payload Format: Determine the format of the data payload (e.g., plain number, JSON). If using JSON, ensure the device publishes data in the expected structure.[5][6][7][15][16]
Unique Identifiers: For MQTT Discovery, ensure your device sends a unique_id in its discovery payload to prevent duplicate entries in Home Assistant.[2][5][7][12]
Retain Flag: For state updates, especially for sensors, configure the device to publish messages with the "retain" flag. This ensures Home Assistant immediately gets the last known state upon restart.[5][15]
7. File System and Configuration Locations
Home Assistant's configuration is primarily managed through YAML files.
configuration.yaml: This is the main configuration file. It's located in the Home Assistant configuration directory, often /config/ on Home Assistant OS/Container installations.[3][5][17]
You can define MQTT entities directly within this file under the mqtt: key.
For larger configurations, you can split your YAML into separate files and include them in configuration.yaml using !include directives (e.g., mqtt: !include mqtt.yaml).
Mosquitto Broker Configuration:
If you're using the Home Assistant Mosquitto Broker add-on, its configuration files (like mosquitto.conf or custom bridge configurations) are typically placed in the /share/mosquitto/ directory.[18][19][20]
To enable custom configurations for the Mosquitto add-on, you usually need to enable "customization" under its "Configuration" tab, which makes it look for config files in /share/mosquitto.[18]
Add-on Data: Add-ons store their data and configurations within the Home Assistant add-on specific directories, but user-editable configurations for Mosquitto are exposed via the /share mount.
8. Advanced Concepts and Troubleshooting
MQTT Explorer: A highly recommended tool for debugging MQTT issues. It allows you to connect to your MQTT broker, subscribe to topics, and view messages in real-time, helping you verify if devices are publishing correctly and if Home Assistant is receiving messages.[1][15][25]
Troubleshooting Connection Issues:
Verify Broker is Running: Ensure the Mosquitto add-on is started and healthy. Check its logs for errors.[1][18]
Check Credentials: Double-check the MQTT username and password configured in both Home Assistant and your devices.[25][26]
Firewall: Ensure no firewall rules are blocking port 1883 (or your custom MQTT port) between your devices, Home Assistant, and the broker.
Topic Mismatches: Ensure the state_topic in Home Assistant exactly matches the topic your device is publishing to.
Payload Format: Verify that the value_template in Home Assistant correctly parses the payload sent by your device, especially for JSON payloads.[16]
Retain Flag: If sensors show "unavailable" initially, ensure the device is publishing with the retain flag.[15]
Home Assistant Logs: Check the Home Assistant logs for any MQTT-related errors or warnings.
QoS Levels: While QoS 0 is often sufficient for many home automation tasks, understanding QoS 1 and 2 can be important for critical messages where delivery guarantees are paramount.
MQTT Bridges: For advanced setups, you can configure MQTT bridges to connect two separate MQTT brokers, allowing messages to flow between them. This is useful for integrating devices on different networks or cloud services.[18][20]
Home Assistant Updates: Be aware that Home Assistant updates can sometimes introduce changes to MQTT discovery or integration behavior. Always review release notes.[27][28][29][30]
By understanding these components and following the setup procedures, you can effectively integrate a wide range of MQTT-enabled devices into your Home Assistant ecosystem, creating a powerful and flexible smart home.
Sources
help
haprofs.com
home-assistant.io
atmotube.com
bituo-technik.com
home-assistant.io
stevessmarthomeguide.com
youtube.com
youtube.com
atmotube.com
homeautomationguy.io
amsleser.no
github.io
bbqkees-electronics.nl
krasamo.com
youtube.com
reddit.com
frigate.video
solar-assistant.io
reddit.com
home-assistant.io
github.io
reddit.com
reddit.com
google.com
supla.org
elektroda.com
youtube.com
reddit.com
home-assistant.io
dietpi.com