# HANDOVER-V2-CHECKPOINT :: DO NOT EDIT THIS FILE WITHOUT REVIEWING HANDOVER.md
"""Sensor platform for the BluPow integration."""
import logging
from typing import Any

from homeassistant.components.sensor import SensorEntity, SensorEntityDescription
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import CONF_ADDRESS
from homeassistant.core import HomeAssistant
from homeassistant.helpers.entity import DeviceInfo
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.update_coordinator import CoordinatorEntity

from .const import DEVICE_SENSORS, DOMAIN
from .coordinator import BluPowDataUpdateCoordinator

_LOGGER = logging.getLogger(__name__)


async def async_setup_entry(
    hass: HomeAssistant,
    entry: ConfigEntry,
    async_add_entities: AddEntitiesCallback,
) -> None:
    """Set up the BluPow sensor entities from a config entry."""
    coordinator: BluPowDataUpdateCoordinator = entry.runtime_data
    
    entities = [
        BluPowSensor(coordinator, description)
        for description in DEVICE_SENSORS
    ]
    async_add_entities(entities)
    _LOGGER.info("Added %d BluPow sensors", len(entities))


class BluPowSensor(CoordinatorEntity[BluPowDataUpdateCoordinator], SensorEntity):
    """A sensor entity for a BluPow device that uses the coordinator."""

    def __init__(
        self,
        coordinator: BluPowDataUpdateCoordinator,
        description: SensorEntityDescription,
    ) -> None:
        """Initialize the sensor."""
        super().__init__(coordinator)
        self.entity_description = description
        
        self._attr_unique_id = f"{coordinator.client.address}_{description.key}"
        # The device_info is provided by the coordinator
        self._attr_device_info = coordinator.device_info

    @property
    def native_value(self) -> Any:
        """Return the state of the sensor."""
        if self.coordinator.data:
            return self.coordinator.data.get(self.entity_description.key)
        return None

    @property
    def available(self) -> bool:
        """Return if the entity is available."""
        return self.coordinator.last_update_success and \
               self.coordinator.data.get('connection_status') == 'connected'

    async def async_added_to_hass(self) -> None:
        """Handle entity added to hass with logging."""
        try:
            await super().async_added_to_hass()
            _LOGGER.info("BluPow sensor %s added to Home Assistant", self.entity_description.key)
        except Exception as err:
            _LOGGER.error("Error adding BluPow sensor %s to hass: %s", 
                         self.entity_description.key, err)

    async def async_will_remove_from_hass(self) -> None:
        """Handle entity removal with logging."""
        try:
            await super().async_will_remove_from_hass()
            _LOGGER.info("BluPow sensor %s removed from Home Assistant", self.entity_description.key)
        except Exception as err:
            _LOGGER.error("Error removing BluPow sensor %s from hass: %s", 
                         self.entity_description.key, err)

